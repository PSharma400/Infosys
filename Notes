216878----AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions

Day1 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=216878 
Trainer Name: Pooja Sharma
Use your Corporate Email to mark the attendance

LET Portal(Student Portal) Login: Training details are available on this portal (Meeting Links, Recording Links, Reference Links etc.)
      Link:----- https://www.mykoenig.com/
      Credentials Details:---- Corporate Email ID: Your Corporate Email ID, Password: 216878

Lab Access Details:
    Lab Link: https://gsi.learnondemand.net/
    Email ID: Login using your personal Microsoft account Email ID
    Click Register and Redeem Lab training key (Training Key: 3633C4458159488E )
    **Important: Make sure you Redeem Lab training key within these training days, once training completes, lab key will 
    expire and you will not be able to access labs.

Training Key: 3633C4458159488E

Labs:
https://microsoftlearning.github.io/AZ400-DesigningandImplementingMicrosoftDevOpsSolutions/

Exam:
https://learn.microsoft.com/en-us/credentials/certifications/exams/az-400/

Demo code: 
https://azuredevopsdemogenerator.azurewebsites.net/


DAY 1:-----------------------------------------------------------------------------------------------------------------------


SDLC:---Software Development Life Cycle

design, develop & test 

quality

phases:
1. Planning
2. Defining----SRS document
3. Designing-- FC, ER, DFD
4. Building--- code
5. Testing--- Unit, integration, system, beta, alpha
6. Deployment
7. Maintenance--- preventive, perfective, corrective


1. Waterfall Model:---

large, complex projects


A---50% & 50%---- 1 year
B---pay 10% every month & involve


2. Agile Model:--iterative/sprint based approach

 change requests

DevOps--- 2009

dev(s/w development) + Ops (IT operations)


improve collaboration & integrate the processes 

CI & CD


PPP



Azure DevOps ---- Oct 2018

SaaS

Services:----
1. Azure Boards
2. Azure Repos
3. Azure Pipelines (CI, CD)
4. Azure Artifacts
5. Azure TestPlans


Microsoft Account
subscription--- EA, PAYG


70+ region, 140 countries

Physical Component:---
1. Geography
2. Regions, Region Pairs(HA)
3. Availability Zones--- 3
4. DC
5. Racks


Logical Components:---
1. Account
2. Management Groups--- 6 level depth
3. Subscription
4. Resource Group
5. Resources(VM, App Service, SA, Vnet)

VM--- Compute Resource---- Microsoft.compute

App service---Microsoft.web


Resource Providers
---auto register

azure portal, Azure CLI, Azure PowerShell

ARM


1. portal.azure.com ---------> Azure DevOps Org
2. dev.azure.com
3. dev.azure.com/orgname
4. dev.azure.com/orgname/projectname


aex.dev.azure.com---- default directory



Azure Boards--- processes---> for managing work items

Basic
Scrum
Agile
CMMI



1. Bug
2. Epic
3. features
4. issue
5. task
6. user story
7. test cases


DAY 2:-----------------------------------------------------------------------------------------------------------------------

Day2 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=216878 
Trainer Name: Pooja Sharma
Use your Corporate Email to mark the attendance

LET Portal(Student Portal) Login: Training details are available on this portal (Meeting Links, Recording Links, Reference Links etc.)
      Link:----- https://www.mykoenig.com/
      Credentials Details:---- Corporate Email ID: Your Corporate Email ID, Password: 216878

Lab Access Details:
    Lab Link: https://gsi.learnondemand.net/
    Email ID: Login using your personal Microsoft account Email ID
    Click Register and Redeem Lab training key (Training Key: DD2DCD3A81F94EC0 )
    **Important: Make sure you Redeem Lab training key within these training days, once training completes, lab key will 
    expire and you will not be able to access labs.



Service Hook:---let run tasks on other services when event happen in your projects in azure DevOps


(microsoft service)Teams channel--- workitem created



publisher--- set of events
subscriptions
action 


Projects:----

1. Greenfield Projects

projects focused around the new implementation

2. Brownfield Projects

project focused around maintaining an existing project



Team structures:
1. Horizontal

based on the s/w architecture  or technology components.

front-end , back-end, databases

2. Vertical 
organized around product outcome or customer centric features.





Version Control/ Source Control / SCM(Source Code Management)


1. Collaboration
2. Tracking changes (3 W's (who, When, What))
3. Code Versioning
4. rollback & recovery
5. conflict resolution
6. Branching & Merging



x.x.x------->major minor bug

1.0.0-------> 1.0.1


Best Practices:----------

1. Make small, frequent commits
2. Don't commit personal or sensitive files
3. Update your code often
4. Verify changes before pushing
5. Write clear commit message
6. Use Branches effectively
7. Review code changes


Types of Source Control:

1. Centralized VCS

2. Distributed VCS



Azure Repos

1) TFVC
2) Git


Multi Repos
Mono Repos


https://InfosysMarch400@dev.azure.com/InfosysMarch400/PublicProject1/_git/PublicProject1


**** Create a branch


1. create the branch
2. Add commits
3. Open a pull request
4. Discuss & review a code
5. merge



git fetch:---
download commits, files from remote repo in to your local repo


git pull:---
fetch changes from remote repo & merge in to the current branch


get fetch git merge



Fork a Repo:

copy of repo----- all branches, commits, files


1. create a fork
2. Clone it locally
3. create the branch & push the changes there
4. pull request
5. sync




merge type
post merge operations:

1. customize the PR message
2. Delete the branch after the merge---- Yes



*** Identify Technical Debt

Code Debt/ Design Debt

i. Poor code design
ii. using outdated technologies
iii. lack of documentation
iv. inadequate testing


key traits:---
1. Reliability-----MTBF
2. Maintainability
3. Testability
4. Portability
5. Reusability--- modularity---- loose coupling


High speed & High Quality

i) Failed build %
ii) failed deployment %
iii) Ticket volume
iv) bug bounce %
v) unplanned work %


Manage the technical debt:----

Tools:---
1. Sonar Cloud---- CI/CD pipelines
2. NDepend--- LINQ Queries
3. Resharper Code Quality Analysis

automate testing

Document

train

refactoring


***** Azure DevOps Wiki/ Project Wiki

document project details
share knowledge
central hub for team collaborate


links, images, mermaid diagram, tables, formula, text, HTML, files

Pages & sub pages


Best Practices:----
1. organize content clearly
2. Version control
3. define naming conventions
4. keep it updated
5. set permission wisely
6. use markdown effectively


contributor Group:  add or edit wiki pages
Project Administrator Group:  publish code as wiki


****Mermaid: java based diagramming & charting tool---- create the diagrams & visualizations using text & code


Flow charts, sequence diagrams, pie chart, bar chart, gantt chart etc.


open source 



DAY 3:-----------------------------------------------------------------------------------------------------------------------

Day3 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=216878 
Trainer Name: Pooja Sharma
Use your Corporate Email to mark the attendance

LET Portal(Student Portal) Login: Training details are available on this portal (Meeting Links, Recording Links, Reference Links etc.)
      Link:----- https://www.mykoenig.com/
      Credentials Details:---- Corporate Email ID: Your Corporate Email ID, Password: 216878

Lab Access Details:
    Lab Link: https://gsi.learnondemand.net/
    Email ID: Login using your personal Microsoft account Email ID
    Click Register and Redeem Lab training key (Training Key: DD2DCD3A81F94EC0 )
    **Important: Make sure you Redeem Lab training key within these training days, once training completes, lab key will 
    expire and you will not be able to access labs.


Achievement URL:
https://learn.microsoft.com/en-us/users/me/achievements?redeem=842K4G&WT.mc_id=ilt_partner_webpage_wwl&ocid=508978&DCS=DEPR2510816



Azure Pipeline:----

automatically builds, tests & deploy the code.

Build Automation/ Continuous Integration

Test Automation/ Continuous Testing

Deployment Automation / Continuous Deployment




Azure App Service--- host the webapp

infosyswebapp.azurewebsites.net

Compute---- Azure App Service Plan (SKU--->basic, standard, premium, isolated)
1) h/w view
2) feature view

Region
vCPU
Disks
VM instances
custom domain (infosyswebapp.infosys.com)
zone redundancy
backup


Staging slots ----swap----    production  env


scale up--- Basic-->Standard
scale out--- increase no. of instances (auto scaling/ manual)

avg CPU%----------- 80% for 10 min +1



Azure Pipeline Pros:
1. supports any language
2. Support cross platforms
3. integrate with GitHub
4. work with open source projects



Terms:---

1. Build--- one execution of pipeline. collect the logs

2. Jobs---- one or more jobs. execution boundary of set of steps

3. Agent---installable s/w that run build jobs & deployment jobs

4. Task--- build task & test tasks & deployment tasks



Agents:

1. Microsoft Hosted Agent 


fully managed
fresh new VM
win, Linus, MacOS

Cons:---
limited s/w control
time limits

2. Self-hosted Agent

maintenance & upgrades
s/w flexibility
platform compatibility
No time limit


YAML

minimal syntax
easy to read & write
datatypes
compatibility




AZure Key vault

API keys, passwords, certificates, cryptographic keys


access control--- RBAC



Continuous Delivery Vs Continuous Deployment


****Release Gates & Approvals

control the workflow of the deployment pipeline



i) Pre-deployment conditions--- approvers   gates----> accept
       |
       |
        
Deployment Process---- jobs
        |
        |  
ii) Post-deployment conditions--- approvers   gates



**** Continuous Delivery

Traditional:

1. Planning
2. Requirement Analysis
3. Design
4. Development
5. Testing
6. Deployment
7. Maintenance

Modern:
1. Plan
2. Realize (development & testing)---(CI & CT)
3. Release (CD)
4. Value (C Improvement)


 Release  Vs   Deployment

V1.0.0
V2.0.0
V2.0.1



Deployment Patterns:----

1. Classical Deployment Pattern (DTSP--- Dev-Test-Staging-Production)

2. Modern Deployment Pattern

i) Blue-Green Deployment

Blue--active
Green--Passive


ii) Canary Releases/ Canary Deployment

early warning system 

limited subset of users


1. Feature toggles(feature flags)
2. Deployment Slots

monitoring & feedback

iii) Dark Deployment

1. feature implementation
2. feature toggle
3. users segment
4. enable feature
5. data collection
6. Analysis
